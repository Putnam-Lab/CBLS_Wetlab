TA[i,2]<-name #exports the sample ID into output file, column 2
TA[i,3]<-1000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$mV[mV], volume=Data$Volume[mV])
TA[i,4]<-mass #exports the mass into the TA output file, column 4
TA[i,5]<-s #exports the salinity column into the output file, column 5
}
TA[,3:4]<-sapply(TA[,3:4], as.numeric) # make sure the appropriate columns are numeric
View(TA)
#exports your data as a CSV file
write.table(TA,paste0(path,"/","TA_Output_",titrationfile),sep=",", row.names=FALSE)
#Cumulative TA
cumu.data <- read.csv("../../CBLS_Wetlab/Data/CBLS_Aquarium_TA.csv", header=TRUE, sep=",")
update.data <- rbind(cumu.data, TA)
write.table(TA,paste0(path,"/","CBLS_Aquarium_TA.csv",titrationfile),sep=",", row.names=FALSE)
#check that your new data has been appended to the cumulative TA dataframe (added 20220623 by LZ)
tail(update.data)
#export data as csv file to Data directory
write.table(update.data,"../../CBLS_Wetlab/Data/CBLS_Aquarium_TA.csv",sep=",", row.names=FALSE)
# modified for personal Lenovo PC at PT Whitney summer 2019
# last modification on 20210621 by RB
setwd("/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Data/tris_cal/") #set working directory
Calib.Data <-read.table("20231109_BT12.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
Calib.Data <-read.table("20231109_BT12.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
View(Calib.Data)
Calib.Data <-read.table("20231109_BT12.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
model <-lm(mVTris ~ Ttris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
Calib.Data <-read.table("20231109_BT3_4.csv.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
Calib.Data <-read.table("20231109_BT3_4.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ Ttris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
plot(mVTris ~ Ttris, data=Calib.Data)
abline(lm(mVTris ~ Ttris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
#------------------------------------------------------------
rm(list=ls()) # sweep environment
#load libraries----------------------------------------------
library(seacarb) #used to calculate TA
## NOTE: newer versions of the seacarb package have a hard time recognizing the "at" function
## you need to check that the version installed is version 3.2, not version 3.3.1 which is the newest version of the "seacarb"
## package as of 20220822
## LZ replaced v 3.3.1 with version 3.2 from the CRAN archive (https://cran.r-project.org/src/contrib/Archive/seacarb/) 20220822
packageurl <- "https://cran.r-project.org/src/contrib/Archive/seacarb/seacarb_3.2.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
library(tidyverse)
## <<<<<<< HEAD
path<-"Titrator/Data/BlueTank_Titrations/20231110" #the location of all your titration files, your folder of the day!
## <<<<<<< HEAD
path<-"Titrator/Data/BlueTank_Titrations/20231110" #the location of all your titration files, your folder of the day!
massfile<-"Mass_CRM2_20231110.csv" # name of your file with masses
titrationfile<-'20231103_CRM2.csv'# name of the last titration file run
# Date that the data were run
date<-'20231110'
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
path<-"../Data/BlueTank_Titrations/20231103/" #the location of all your titration files, your folder of the day!
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
path<-"../Data/BlueTank_Titrations/20231110/" #the location of all your titration files, your folder of the day!
massfile<-"Mass_CRM2_20231110.csv" # name of your file with masses
titrationfile<-'20231103_CRM2.csv'# name of the last titration file run
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
# Date that the data were run
date<-'20231110'
path<-"../Data/BlueTank_Titrations/20231110/" #the location of all your titration files, your folder of the day!
massfile<-"Mass_CRM2_20231110.csv" # name of your file with masses
titrationfile<-'20231110_CRM2.csv'# name of the last titration file run
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
#------------------------------------------------------------
rm(list=ls()) # sweep environment
path<-"../../../Titrator/Data/BlueTank_Titrations/20231110/" #the location of all your titration files, your folder of the day!
# Date that the data were run
date<-'20231110'
massfile<-"Mass_CRM2_20231110.csv" # name of your file with masses
titrationfile<-'20231110_CRM2.csv'# name of the last titration file run
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
View(Mass)
pHCal<-read.csv("../../../Data/pHCalibration.csv") # read in the pH Calibration file
pHCal<-read.csv("../../../Titrator/Data/pHCalibration.csv") # read in the pH Calibration file
pHData<-pHCal[pHCal$Date==date,]
View(pHData)
mod.pH<-lm(c(pHData$pH4, pHData$pH7, pHData$pH10)~c(4,7,10)) # linear model
png(paste0(path,"/",Sys.Date(),'pHmvplot.png'), height = 400, width = 400)
plot(c(4,7,10), c(pHData$pH4, pHData$pH7, pHData$pH10), xlab = 'pH', ylab = 'mv')
lines(c(4,7,10), predict(mod.pH))
R2<-summary(mod.pH)$r.squared
legend('topright', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
dev.off()
pH35<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3.5
pH3<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3
nrows<-nrow(Mass) #need file length/number of rows
TA <- data.frame(matrix(nrow = nrows, ncol = 5)) # changed from 4 columns to 5 LZ 20220720
rownames(TA)<-Mass$Sample.ID1[1:nrows]
colnames(TA)<-c("Date","SampleID",'TA','Mass','Salinity') # added date column LZ 20220720
filename<-file.path(path,titrationfile)
AllData<-read.csv(filename, sep=",", na.string="NA", as.is=T, skip=4)[ ,1:5]
#Identifies rows starting with scope in column 1 of the titration file
sample_name_positions <- c(1,grep("^Scope", AllData[,1]), nrow(AllData))
## parse through all the data in the one file ###
sample_names<-Mass$Sample.ID1
# create a list with all the sample IDs
sample_names_list <- list()
for (item in 1:length(sample_names)){
sample_names_list[[item]] <- sample_names[item]
}
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Volume","Time","mV","Temperature","dV/dt")
}
for(i in 1:nrows) {
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature))
Data$Volume<-suppressWarnings(as.numeric(Data$Volume))
#name of the file without .csv
#name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
name<-sample_names[i]
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
#CHANGE ONLY WHEN NEW BOTTLE OF ACID IS USED----------------------------------
#density of your titrant: change every time acid is changed
#Batch A16 changed on 20190731 by SJG, SIlbiger used same batch
#d<-(-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001065*mean(Data$Temperature[mV], na.rm=T)+1.02884) #20190731 Batch A16
#Danielle Becker updated script and changed acid to new batch #A22 on 20220127
d<- (-0.00000400*mean(Data$Temperature[mV], na.rm=T)^2-0.0001116*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20220127 Batch A22 DMBP
#concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
#c<-0.100010 ##Batch A16 first used by SJG on 20190731
c<-0.100347 ##Batch A22 first used by DMBP on 20220127
#------------------------------------------------------------------------------
#Salinity of your samples, set salinity for all titrations using a junk or CRM (single value)
s<-Mass[Mass$Sample.ID1==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$Sample.ID1==name,2]
#sample.index<-Mass[Mass$Sample.ID1==name,3]# this is the order that the sample was run
#-------------------------------------------------------------------
#Calculate TA
#at function is based on code in seacarb package by Steve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
TA[i,1]<-date #exports the date into output file, column 1; added by LZ 20220720
TA[i,2]<-name #exports the sample ID into output file, column 2
TA[i,3]<-1000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$mV[mV], volume=Data$Volume[mV])
TA[i,4]<-mass #exports the mass into the TA output file, column 4
TA[i,5]<-s #exports the salinity column into the output file, column 5
}
TA[,3:4]<-sapply(TA[,3:4], as.numeric) # make sure the appropriate columns are numeric
#exports your data as a CSV file
write.table(TA,paste0(path,"/","TA_Output_",titrationfile),sep=",", row.names=FALSE)
View(TA)
path<-"../../../Titrator/Data/BlueTank_Titrations/20231110/" #the location of all your titration files, your folder of the day!
# Date that the data were run
date<-'20231110'
massfile<-"Mass_20231110.csv" # name of your file with masses
titrationfile<-'20231110_blue_tank.csv'# name of the last titration file run
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
pHCal<-read.csv("../../../Titrator/Data/pHCalibration.csv") # read in the pH Calibration file
pHData<-pHCal[pHCal$Date==date,]
mod.pH<-lm(c(pHData$pH4, pHData$pH7, pHData$pH10)~c(4,7,10)) # linear model
png(paste0(path,"/",Sys.Date(),'pHmvplot.png'), height = 400, width = 400)
plot(c(4,7,10), c(pHData$pH4, pHData$pH7, pHData$pH10), xlab = 'pH', ylab = 'mv')
lines(c(4,7,10), predict(mod.pH))
R2<-summary(mod.pH)$r.squared
legend('topright', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
dev.off()
pH35<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3.5
pH3<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3
nrows<-nrow(Mass) #need file length/number of rows
titrationfile<-'20231110_blue_tank.csv'# name of the last titration file run
nrows<-nrow(Mass) #need file length/number of rows
TA <- data.frame(matrix(nrow = nrows, ncol = 5)) # changed from 4 columns to 5 LZ 20220720
rownames(TA)<-Mass$Sample.ID1[1:nrows]
colnames(TA)<-c("Date","SampleID",'TA','Mass','Salinity') # added date column LZ 20220720
filename<-file.path(path,titrationfile)
AllData<-read.csv(filename, sep=",", na.string="NA", as.is=T, skip=4)[ ,1:5]
#Identifies rows starting with scope in column 1 of the titration file
sample_name_positions <- c(1,grep("^Scope", AllData[,1]), nrow(AllData))
## parse through all the data in the one file ###
sample_names<-Mass$Sample.ID1
# create a list with all the sample IDs
sample_names_list <- list()
for (item in 1:length(sample_names)){
sample_names_list[[item]] <- sample_names[item]
}
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Volume","Time","mV","Temperature","dV/dt")
}
for(i in 1:nrows) {
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature))
Data$Volume<-suppressWarnings(as.numeric(Data$Volume))
#name of the file without .csv
#name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
name<-sample_names[i]
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
#CHANGE ONLY WHEN NEW BOTTLE OF ACID IS USED----------------------------------
#density of your titrant: change every time acid is changed
#Batch A16 changed on 20190731 by SJG, SIlbiger used same batch
#d<-(-0.00000410*mean(Data$Temperature[mV], na.rm=T)^2-0.0001065*mean(Data$Temperature[mV], na.rm=T)+1.02884) #20190731 Batch A16
#Danielle Becker updated script and changed acid to new batch #A22 on 20220127
d<- (-0.00000400*mean(Data$Temperature[mV], na.rm=T)^2-0.0001116*mean(Data$Temperature[mV], na.rm=T)+1.02881) #20220127 Batch A22 DMBP
#concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
#c<-0.100010 ##Batch A16 first used by SJG on 20190731
c<-0.100347 ##Batch A22 first used by DMBP on 20220127
#------------------------------------------------------------------------------
#Salinity of your samples, set salinity for all titrations using a junk or CRM (single value)
s<-Mass[Mass$Sample.ID1==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$Sample.ID1==name,2]
#sample.index<-Mass[Mass$Sample.ID1==name,3]# this is the order that the sample was run
#-------------------------------------------------------------------
#Calculate TA
#at function is based on code in seacarb package by Steve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
TA[i,1]<-date #exports the date into output file, column 1; added by LZ 20220720
TA[i,2]<-name #exports the sample ID into output file, column 2
TA[i,3]<-1000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$mV[mV], volume=Data$Volume[mV])
TA[i,4]<-mass #exports the mass into the TA output file, column 4
TA[i,5]<-s #exports the salinity column into the output file, column 5
}
TA[,3:4]<-sapply(TA[,3:4], as.numeric) # make sure the appropriate columns are numeric
View(TA)
#exports your data as a CSV file
write.table(TA,paste0(path,"/","TA_Output_",titrationfile),sep=",", row.names=FALSE)
#Cumulative TA
cumu.data <- read.csv("../../CBLS_Wetlab/Data/CBLS_Aquarium_TA.csv", header=TRUE, sep=",")
update.data <- rbind(cumu.data, TA)
write.table(TA,paste0(path,"/","CBLS_Aquarium_TA.csv",titrationfile),sep=",", row.names=FALSE)
#check that your new data has been appended to the cumulative TA dataframe (added 20220623 by LZ)
tail(update.data)
update.data <- rbind(cumu.data, TA)
#Cumulative TA
cumu.data <- read.csv("../../CBLS_Wetlab/Data/CBLS_Aquarium_TA.csv", header=TRUE, sep=",")
#exports your data as a CSV file
write.table(TA,paste0(path,"/","TA_Output_",titrationfile),sep=",", row.names=FALSE)
View(TA)
getwd()
daily <- read.csv("../Data/Daily_measurements_tracking.csv")
head(daily)
tail(daily) # check to make sure data from today is there
daily$Date <- as.character(daily$Date)
daily$tris.date <- as.character(daily$tris.date)
daily <- daily %>%
filter(!Tank_ID == "quarantine_tank")
View(daily)
BT1_2 <- daily %>%
filter(Tank_ID == "blue_tank1"|"blue_tank2")
View(daily)
BT1_2 <- daily %>%
filter(Tank_ID == "blue_tank1" | Tank_ID == "blue_tank2")
pHcalib<-read_csv("../Data/Tris_Calibration_BT1_2.csv")
pHcalib$tris.date<-as.character(pHcalib$tris.date)
View(pHcalib)
pHSlope <- pHcalib %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(daily, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`) %>%
filter(!is.na(mVTris) & !is.na(Temperature_C) & !is.na(Salinity_psu) & !is.na(pH_mv)) %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
daily$Date <- ymd(daily$Date) # convert 8 digit date into datetime format
daily.long <-daily %>% pivot_longer(cols=Temperature_C:Salinity_psu,
names_to = "metric",
values_to = "value")
View(daily.long)
```{r}
daily_tank<-daily.long %>%
ggplot(aes(x=Date, y=value, colour=Tank_ID))+
geom_point(size=4)+
xlab("Date")+
facet_grid(metric ~ ., scales = "free")+
theme_bw() +
theme(text = element_text(size = 14)); daily_tank
# Filter to the past 30 days
daily_month <- daily.long %>%
filter(Date >= Sys.Date() - 30)  # Adjust 30 to the number of days you want to consider
# Plot data from the past month
daily_month<-daily_month %>%
ggplot(aes(x=Date, y=value, colour=Tank_ID))+
geom_point(size=4)+
xlab("Date")+
facet_grid(metric ~ ., scales = "free")+
theme_bw() +
theme(text = element_text(size = 14)); daily_month
# Save plot
ggsave("../Output/Daily_Measurements_Past_Month.pdf", daily_month, width = 20, height = 15, units = c("in"))
daily_month <- daily %>%
filter(Date >= Sys.Date() - 30)  # Adjust 30 to the number of days you want to consider
summary<-daily_month%>%
group_by(Tank_ID)%>%
#select(!tank)%>%
select(!Date)%>%
select(!light2:notes)%>%
summarise(across(everything(), list(mean = mean, sd = sd), na.rm = TRUE)); summary
pHSlope <- pHcalib %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(daily, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`) %>%
filter(!is.na(mVTris) & !is.na(Temperature_C) & !is.na(Salinity_psu) & !is.na(pH_mv)) %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
daily$Date <- ymd(daily$Date) # convert 8 digit date into datetime format
pHSlope <- pHcalib %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(daily, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`) %>%
filter(!is.na(mVTris) & !is.na(Temperature_C) & !is.na(Salinity_psu) & !is.na(pH_mv)) %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
pHSlope <- pHcalib %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(daily, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`) %>%
filter(!is.na(mVTris) & !is.na(Temperature_C) & !is.na(Salinity_psu) & !is.na(pH_mv)) %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
View(pHSlope)
View(pHcalib)
View(BT1_2)
daily <- read.csv("../Data/Daily_measurements_tracking.csv")
head(daily)
tail(daily) # check to make sure data from today is there
daily$Date <- as.character(daily$Date)
daily$tris.date <- as.character(daily$tris.date)
daily <- daily %>%
filter(!Tank_ID == "quarantine_tank")
BT1_2 <- daily %>%
filter(Tank_ID == "blue_tank1" | Tank_ID == "blue_tank2")
pHcalib<-read_csv("../Data/Tris_Calibration_BT1_2.csv")
pHcalib$tris.date<-as.character(pHcalib$tris.date)
View(pHcalib)
pHSlope <- pHcalib %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(daily, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`) %>%
filter(!is.na(mVTris) & !is.na(Temperature_C) & !is.na(Salinity_psu) & !is.na(pH_mv)) %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
View(pHSlope)
BT1_2$Date <- ymd(daily$Date) # convert 8 digit date into datetime format
BT1_2$Date <- ymd(BT1_2$Date) # convert 8 digit date into datetime format
BT1_2_long <-BT1_2 %>% pivot_longer(cols=Temperature_C:Salinity_psu,
names_to = "metric",
values_to = "value")
View(BT1_2_long)
daily <- read.csv("../Data/Daily_measurements_tracking.csv")
tail(daily) # check to make sure data from today is there
daily$Date <- as.character(daily$Date)
daily$tris.date <- as.character(daily$tris.date)
daily <- read.csv("../Data/Daily_measurements_tracking.csv")
tail(daily) # check to make sure data from today is there
daily$Date <- as.character(daily$Date)
daily$tris.date <- as.character(daily$tris.date)
daily <- daily %>%
filter(!Tank_ID == "quarantine_tank")
BT1_2 <- daily %>%
filter(Tank_ID == "blue_tank1" | Tank_ID == "blue_tank2")
pHcalib<-read_csv("../Data/Tris_Calibration_BT1_2.csv")
pHcalib$tris.date<-as.character(pHcalib$tris.date)
pHSlope <- pHcalib %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(daily, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`) %>%
filter(!is.na(mVTris) & !is.na(Temperature_C) & !is.na(Salinity_psu) & !is.na(pH_mv)) %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
View(BT1_2)
pHcalib<-read_csv("../Data/Tris_Calibration_BT1_2.csv")
pHcalib$tris.date<-as.character(pHcalib$tris.date)
pHSlope <- pHcalib %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(BT1_2, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`) %>%
filter(!is.na(mVTris) & !is.na(Temperature_C) & !is.na(Salinity_psu) & !is.na(pH_mv)) %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
View(pHcalib)
View(pHcalib)
pHSlope <- pHcalib %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(BT1_2, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`) %>%
filter(!is.na(mVTris) & !is.na(Temperature_C) & !is.na(Salinity_psu) & !is.na(pH_mv)) %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
View(pHcalib)
View(BT1_2)
pHcalib<-read_csv("../Data/Tris_Calibration_BT1_2.csv")
pHcalib$tris.date<-as.character(pHcalib$tris.date)
pHcalib<-read_csv("../Data/Tris_Calibration_BT1_2.csv")
pHcalib$tris.date<-as.character(pHcalib$tris.date)
pHSlope <- pHcalib %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(BT1_2, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`) %>%
filter(!is.na(mVTris) & !is.na(Temperature_C) & !is.na(Salinity_psu) & !is.na(pH_mv)) %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
View(daily)
BT1_2 <- daily %>%
filter(Tank_ID == "blue_tank1" | Tank_ID == "blue_tank2" | Date == 202311010)
BT1_2 <- daily %>%
filter(Tank_ID == "blue_tank1" | Tank_ID == "blue_tank2" | Date == 20231110)
View(BT1_2)
daily <- read.csv("../Data/Daily_measurements_tracking.csv")
tail(daily) # check to make sure data from today is there
daily <- read.csv("../Data/Daily_measurements_tracking.csv")
tail(daily) # check to make sure data from today is there
daily$Date <- as.character(daily$Date)
daily$tris.date <- as.character(daily$tris.date)
daily <- daily %>%
filter(!Tank_ID == "quarantine_tank")
BT1_2 <- daily %>%
filter(Tank_ID == "blue_tank1" | Tank_ID == "blue_tank2" | Date == 20231110)
pHcalib<-read_csv("../Data/Tris_Calibration_BT1_2.csv")
pHcalib$tris.date<-as.character(pHcalib$tris.date)
pHSlope <- pHcalib %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(BT1_2, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`) %>%
filter(!is.na(mVTris) & !is.na(Temperature_C) & !is.na(Salinity_psu) & !is.na(pH_mv)) %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
View(pHSlope)
BT1_2 <- daily %>%
filter(Tank_ID == "blue_tank1" | Tank_ID == "blue_tank2" | Date == 20231110)
View(BT1_2)
pHcalib<-read_csv("../Data/Tris_Calibration_BT1_2.csv")
pHcalib$tris.date<-as.character(pHcalib$tris.date)
pHSlope <- pHcalib %>%
group_by(tris.date) %>%
nest() %>%
mutate(fitpH = map(data, ~ lm(mVTris ~ TTris, data = .x))) %>%
mutate(tidy_fit = map(fitpH, broom::tidy)) %>%
unnest(tidy_fit) %>%
select(tris.date, term, estimate) %>%
pivot_wider(names_from = term, values_from = estimate) %>%
left_join(BT1_2, ., by = "tris.date") %>%
mutate(mVTris = Temperature_C * TTris + `(Intercept)`) %>%
filter(!is.na(mVTris) & !is.na(Temperature_C) & !is.na(Salinity_psu) & !is.na(pH_mv)) %>%
mutate(pH.total = seacarb::pH(Ex = pH_mv, Etris = mVTris, S=Salinity_psu, T=Temperature_C))
View(pHSlope)
