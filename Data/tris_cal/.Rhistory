path <-("/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Data/tris_cal") #set path to calibration files
ile.names<-list.files(path = path, pattern = "csv$") #list all the file names in the folder to get only the .csv files
file.names<-list.files(path = path, pattern = "csv$") #list all the file names in the folder to get only the .csv files
print(file.names)
pH.cals <- data.frame(matrix(NA, nrow=length(file.names), ncol=3, dimnames=list(file.names,c("Date", "Intercept", "Slope")))) #generate a 3 column dataframe with specific column names
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Calib.Data <-read.table(file.path(path,file.names[i]), header=TRUE, sep=",", na.string="NA",
as.is=TRUE) #reads in the data files
file.names[i]
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
summary(model)$r.squared #extracts the r squared
plot(Calib.Data$mVTris, Calib.Data$TTris, main = summary(model)$r.squared) #plots the regression data
pH.cals[i,2:3] <- coe #inserts coefficients in the dataframe
pH.cals[i,1] <- substr(file.names[i],1,8) #stores the file name in the Date column
}
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Calib.Data <-read.table(file.path(path,file.names[i]), header=TRUE, sep=",", na.string="NA",
as.is=TRUE) #reads in the data files
file.names[i]
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
summary(model)$r.squared #extracts the r squared
plot(Calib.Data$mVTris, Calib.Data$TTris, main = summary(model)$r.squared) #plots the regression data
pH.cals[i,2:3] <- coe #inserts coefficients in the dataframe
pH.cals[i,1] <- substr(file.names[i],1,8) #stores the file name in the Date column
}
colnames(pH.cals) <- c("Date",  "Intercept",  "Slope")#rename columns
pH.cals$Date <- ymd(pH.cals$Date)
#constants for use in pH calculation
R <- 8.31447215 #gas constant in J mol-1 K-1
#merge with Seawater chemistry file
SW.chem <- full_join(no_qtank, pH.cals, by="Date")
calib.date <- "2022-08-25"
pH.cals<-pH.cals[pH.cals$Date==calib.date,]
month <-daily_measurements[daily_measurements$Date >= "2022-08-17" & daily_measurements$Date <= "2022-08-31", ]
nrows<-nrow(month) #need file length/number of rows
total_pH <- data.frame(matrix(nrow = nrows, ncol = 6)) # changed from 4 columns to 5 LZ 20220720
colnames(total_pH)<-c("Date","Tank_ID", "Temperature_C",'mvTris','phTris','pH.Total')
mvTris <- month$Temperature_C*pH.cals$Slope+pH.cals$Intercept #calculate the mV of the tris standard using the temperature mv relationships in the measured standard curves
STris<-35 #salinity of the Tris
print(mvTris)
phTris<- (11911.08-18.2499*STris-0.039336*STris^2)*(1/(month$Temperature_C+273.15))-366.27059+ 0.53993607*STris+0.00016329*STris^2+(64.52243-0.084041*STris)*log(month$Temperature_C+273.15)-0.11149858*(month$Temperature_C+273.15) #calculate the pH of the tris (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
print(phTris)
pH.Total<-phTris+(mvTris/1000-month$pH_mv/1000)/(R*(month$Temperature_C+273.15)*log(10)/F) #calculate the pH on the total scale (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
print(pH.Total)
# populate empty dataframe with Tris calibrations
Date <- month$Date
Date <- ymd(month$Date)
total_pH$Date <- Date
print(total_pH$Date)
total_pH$Date <- as.Date(total_pH$Date)
Tank_ID <- month$Tank_ID
total_pH$Tank_ID <- Tank_ID
Temperature_C <- month$Temperature_C
total_pH$Temperature_C <- Temperature_C
total_pH$pH.Total <- pH.Total
total_pH$phTris <- phTris
total_pH$mvTris <- mvTris
# append total pH to cumulative total pH dataframe each week
getwd()
total_pH_cumu <- read.csv("/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Data/total_pH.csv") # do not change
total_pH_cumu$Date <- as.Date(total_pH_cumu$Date)
total_pH$Date <- as.Date(total_pH$Date)
update.data <- rbind(total_pH_cumu, total_pH)
tail(update.data)
ymd(update.data$Date)
write.table(update.data,"/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Data/total_pH.csv",sep=",", row.names=FALSE) # do not change; updated df needs to overwrite the old one
View(update.data)
nrows<-nrow(month) #need file length/number of rows
total_pH <- data.frame(matrix(nrow = nrows, ncol = 6)) # changed from 4 columns to 5 LZ 20220720
colnames(total_pH)<-c("Date","Tank_ID", "Temperature_C",'mvTris','phTris','pH.Total')
mvTris <- month$Temperature_C*pH.cals$Slope+pH.cals$Intercept #calculate the mV of the tris standard using the temperature mv relationships in the measured standard curves
STris<-35 #salinity of the Tris
print(mvTris)
phTris<- (11911.08-18.2499*STris-0.039336*STris^2)*(1/(month$Temperature_C+273.15))-366.27059+ 0.53993607*STris+0.00016329*STris^2+(64.52243-0.084041*STris)*log(month$Temperature_C+273.15)-0.11149858*(month$Temperature_C+273.15) #calculate the pH of the tris (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
print(phTris)
pH.Total<-phTris+(mvTris/1000-month$pH_mv/1000)/(R*(month$Temperature_C+273.15)*log(10)/F) #calculate the pH on the total scale (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
print(pH.Total)
total_pH_plot <- ggplot(update.data, aes(x=Date, y=pH.Total, group = Tank_ID, colour = Tank_ID)) +
geom_line() +
geom_point()+
theme_classic()+
ylab("total pH")
print(total_pH_plot)
TA_data <- read.csv("/Users/laurenzane/Desktop/Putnam_Lab/Titrator/Data/CBLS_Aquarium_TA.csv")
TA_data$Date <- ymd(TA_data$Date) # convert 8 digit date into datetime format
TA_data$Date <-as.character(TA_data$Date)
# subset to remove junk samples or CRM
TA_unknown_only <- TA_data[(TA_data$SampleID == "BT1") | (TA_data$SampleID == "BT2")|(TA_data$SampleID == "BT3") | (TA_data$SampleID == "HT1") | (TA_data$SampleID == "HT2"),]
TA <- ggplot(TA_unknown_only, aes(x=Date, y=TA, group = SampleID, colour = SampleID)) + geom_line() + geom_point() + theme_classic()
print(TA)
View(TA_data)
View(TA_data)
#load library
library(ggpubr)
# create pdf; change name every day
pdf(file = "/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Output/20220831_daily_measurements.pdf",
width = 4,
height = 4)
daily <- ggarrange(temp, sal, total_pH_plot, TA,
ncol = 2, nrow = 2)
pdf(file = "/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Output/20220831_daily_measurements.pdf",
width = 4,
height = 4)
# combine plots using ggpubr command onto one page
daily <- ggarrange(temp, sal, total_pH_plot, TA,
ncol = 2, nrow = 2)
print(daily) # view plot
# dev.off is used to create the file
dev.off()
gcount.ribofree.zero <- gcount_filt %>% filter(X1041.2 == 0, X1471.2 == 0, X1637.2 == 0)
gcount.ribofree.zero <- gcount_filt %>% filter(X1101.2.gtf = 0, X1548.2.gtf = 0, X1628.2.gtf = 0)
gcount.ribofree.zero <- gcount_filt %>% filter(X1101.2.gtf == 0, X1548.2.gtf == 0, X1628.2.gtf == 0)
gcount.polya.zero <- gcount_filt %>% filter(X1101.2.gtf == 0, X1548.2.gtf == 0, X1628.2.gtf == 0)
gcount.ribofree <- gcount_filt %>% filter(Sample4.2.gtf = 0, Sample5.2.gtf = 0, Sample6.2.gtf = 0 )
gcount.ribofree <- gcount_filt %>% filter(Sample4.2.gtf == 0, Sample5.2.gtf == 0, Sample6.2.gtf == 0 )
gcount.polya.zero <- gcount_filt %>% filter(X1101.2.gtf == 0, X1548.2.gtf == 0, X1628.2.gtf == 0)
gcount.ribofree <- gcount_filt %>% filter(Sample4.2.gtf == 0, Sample5.2.gtf == 0, Sample6.2.gtf == 0 )
View(gcount.ribofree)
View(gcount.ribofree.zero)
summary(gcount_filt)
plot(summary(gcount_filt)
plot(summary(gcount_filt))
hist(gcount.ribofree)
gcount.high.abundance <- gcount_filt %>% filter(X1101.2.gtf >= 336, X1548.2.gtf >= 306, X1628.2.gtf >= 264, Sample4.2.gtf >= 30, Sample5.2.gtf >= 27, Sample6.2.gtf >= 29)
View(gcount.high.abundance)
library(corrplot)
corrplot(cor(gcount.high.abundance))
ggcorrplot(cor(gcount.high.abundance))
library(ggcorrplot)
ggcorrplot(cor(df))
install.packages("ggcorrplot")
library(ggcorrplot)
library(ggcorrplot)
ggcorrplot(cor(gcount.high.abundance))
# subset for highly abundant transcripts
colnames(gcount.high.abundance) <- c("gene_id", "1101", "1548", "1628", "Sample4", "Sample5", "Sample6")
gcount.high.abundance <- cbind(rownames(gcount.high.abundance), data.frame(gcount.high.abundance, row.names=NULL))
colnames(gcount.high.abundance) <- c("gene_id", "1101", "1548", "1628", "Sample4", "Sample5", "Sample6")
high.abundance.plot <- ggplot(data = gcount.high.abundance, x = gene_id, y = Sample4)
high.abundance.plot <- ggplot(gcount.high.abundance, aes = gene_id, Sample4) +
geom_point()
high.abundance.plot <- ggplot(gcount.high.abundance, aes(gene_id, Sample4) +
geom_point())
high.abundance.plot <- ggplot(gcount.high.abundance, aes(gene_id, Sample4)) +
geom_point()
print(high.abundance.plot)
high.abundance.plot <- ggplot(gcount.high.abundance, aes(gene_id, Sample4), color = color) +
geom_point()
print(high.abundance.plot)
high.abundance.plot <- ggplot(gcount.high.abundance, aes(gene_id, Sample4), color = red) +
geom_point()
print(high.abundance.plot)
high.abundance.plot <- ggplot(gcount.high.abundance, aes(gene_id, Sample4), color = "red") +
geom_point()
print(high.abundance.plot)
high.abundance.plot <- ggplot(gcount.high.abundance, aes(gene_id, Sample4)) +
geom_point(color=red)
high.abundance.plot <- ggplot(gcount.high.abundance, aes(gene_id, Sample4)) +
geom_point(color="red")
print(high.abundance.plot)
high.abundance.plot <- ggplot(gcount.high.abundance, aes(gene_id, Sample4)) +
geom_point(color="red")+
labs(x = "gene id", y = "transcript abundance")
print(high.abundance.plot)
print(high.abundance.plot)
plot(gcount.high.abundance$gene_id, gcount.high.abundance$`1101`, type = "o" )
high.abundance.plot <- ggplot(gcount.high.abundance, aes(x=gene_id)) +
geom_point(aes(y=1101, color="red"))+
labs(x = "gene id", y = "gene abundance")
high.abundance.plot <- ggplot(gcount.high.abundance, aes(x=gene_id)) +
geom_point(aes(y=1101, color="red"))+
geom_point(aes(y=1548, color = "blue"))
labs(x = "gene id", y = "gene abundance")
print(high.abundance.plot)
high.abundance.plot <- ggplot(gcount.high.abundance, aes(x=gene_id)) +
geom_point(aes(y=1101, color="red"))
print(high.abundance.plot)
high.abundance.plot <- ggplot(gcount.high.abundance, aes(x=gene_id)) +
geom_point(aes(y="1101", color="red"))
print(high.abundance.plot)
colnames(gcount.high.abundance) <- c("gene_id", "Sample1101", "1548", "1628", "Sample4", "Sample5", "Sample6")
high.abundance.plot <- ggplot(gcount.high.abundance, aes(x=gene_id)) +
geom_point(aes(y="Sample1101", color="red"))
print(high.abundance.plot)
abundance_long <- gcount.high.abundance %>%
pivot_longer(2:7,
names_to = "sample", values_to = "gene count")
view(abundance_long)
abundance_long <- gcount.high.abundance %>%
pivot_longer(2:7,
names_to = "sample", values_to = "gene_count")
undance_long_plot <- ggplot(abundance_long, aes(gene_id, gene_count, color = sample))
abundance_long_plot <- ggplot(abundance_long, aes(gene_id, gene_count, color = sample)) +
geom_point()
print(abundance_long_plot)
abundance_long_plot <- ggplot(abundance_long, aes(gene_id, gene_count, color = sample)) +
geom_histogram()
print(abundance_long_plot)
abundance_long_plot <- ggplot(abundance_long, aes(gene_id, gene_count, color = sample)) +
geom_point()
daily_measurements <- read.csv("../Data/Daily_measurements_tracking.csv")
daily_measurements$Date <- ymd(daily_measurements$Date) # convert 8 digit date into datetime format
month <-daily_measurements[daily_measurements$Date >= "2022-06-01" & daily_measurements$Date <= "2022-09-02", ] # use if you would like to subset by month or from certain date range
no_qtank <- subset(month, Tank_ID != "quarantine_tank") # removing quarantine tank from plot
no_qtank[no_qtank == ""] <- NA # replace blanks with NA
daily_measurements$Tank_ID <- as.factor(daily_measurements$Tank_ID)
temp <- ggplot(no_qtank, aes(x=Date, y=Temperature_C, colour = Tank_ID)) +
geom_line() +
theme_classic() +
geom_point() +
ylab("Temperature °C")
print(temp)
sal <- ggplot(no_qtank, aes(x=Date, y=Salinity_psu, colour = Tank_ID)) +
geom_line() +
theme_classic() +
geom_point() +
ylab("Salinity (psu)")
print(sal)
path <-("/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Data/tris_cal") #set path to calibration files
file.names<-list.files(path = path, pattern = "csv$") #list all the file names in the folder to get only the .csv files
print(file.names)
pH.cals <- data.frame(matrix(NA, nrow=length(file.names), ncol=3, dimnames=list(file.names,c("Date", "Intercept", "Slope")))) #generate a 3 column dataframe with specific column names
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Calib.Data <-read.table(file.path(path,file.names[i]), header=TRUE, sep=",", na.string="NA",
as.is=TRUE) #reads in the data files
file.names[i]
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
summary(model)$r.squared #extracts the r squared
plot(Calib.Data$mVTris, Calib.Data$TTris, main = summary(model)$r.squared) #plots the regression data
pH.cals[i,2:3] <- coe #inserts coefficients in the dataframe
pH.cals[i,1] <- substr(file.names[i],1,8) #stores the file name in the Date column
}
colnames(pH.cals) <- c("Date",  "Intercept",  "Slope")#rename columns
pH.cals$Date <- ymd(pH.cals$Date)
print(pH.cals) #view data
#constants for use in pH calculation
R <- 8.31447215 #gas constant in J mol-1 K-1
#merge with Seawater chemistry file
SW.chem <- full_join(no_qtank, pH.cals, by="Date")
calib.date <- "2022-08-25"
pH.cals<-pH.cals[pH.cals$Date==calib.date,]
month <-daily_measurements[daily_measurements$Date >= "2022-08-17" & daily_measurements$Date <= "2022-09-02", ]
nrows<-nrow(month) #need file length/number of rows
total_pH <- data.frame(matrix(nrow = nrows, ncol = 6)) # changed from 4 columns to 5 LZ 20220720
colnames(total_pH)<-c("Date","Tank_ID", "Temperature_C",'mvTris','phTris','pH.Total')
mvTris <- month$Temperature_C*pH.cals$Slope+pH.cals$Intercept #calculate the mV of the tris standard using the temperature mv relationships in the measured standard curves
STris<-35 #salinity of the Tris
print(mvTris)
phTris<- (11911.08-18.2499*STris-0.039336*STris^2)*(1/(month$Temperature_C+273.15))-366.27059+ 0.53993607*STris+0.00016329*STris^2+(64.52243-0.084041*STris)*log(month$Temperature_C+273.15)-0.11149858*(month$Temperature_C+273.15) #calculate the pH of the tris (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
print(phTris)
pH.Total<-phTris+(mvTris/1000-month$pH_mv/1000)/(R*(month$Temperature_C+273.15)*log(10)/F) #calculate the pH on the total scale (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
print(pH.Total)
# populate empty dataframe with Tris calibrations
Date <- month$Date
Date <- ymd(month$Date)
total_pH$Date <- Date
total_pH$Date <- as.Date(total_pH$Date)
Tank_ID <- month$Tank_ID
total_pH$Tank_ID <- Tank_ID
Temperature_C <- month$Temperature_C
total_pH$Temperature_C <- Temperature_C
total_pH$pH.Total <- pH.Total
total_pH$phTris <- phTris
total_pH$mvTris <- mvTris
total_pH_cumu <- read.csv("/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Data/total_pH.csv") # do not change
total_pH_cumu$Date <- as.Date(total_pH_cumu$Date)
total_pH$Date <- as.Date(total_pH$Date)
update.data <- rbind(total_pH_cumu, total_pH)
tail(update.data)
View(update.data)
write.table(update.data,"/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Data/total_pH.csv",sep=",", row.names=FALSE) # do not change; updated df needs to overwrite the old one
total_pH_plot <- ggplot(update.data, aes(x=Date, y=pH.Total, group = Tank_ID, colour = Tank_ID)) +
geom_line() +
geom_point()+
theme_classic()+
ylab("total pH")
print(total_pH_plot)
TA_data <- read.csv("/Users/laurenzane/Desktop/Putnam_Lab/Titrator/Data/CBLS_Aquarium_TA.csv")
TA_data$Date <-as.character(TA_data$Date)
# subset to remove junk samples or CRM
TA_unknown_only <- TA_data[(TA_data$SampleID == "BT1") | (TA_data$SampleID == "BT2")|(TA_data$SampleID == "BT3") | (TA_data$SampleID == "HT1") | (TA_data$SampleID == "HT2"),]
TA <- ggplot(TA_unknown_only, aes(x=Date, y=TA, group = SampleID, colour = SampleID)) + geom_line() + geom_point() + theme_classic()
print(TA)
#load library
library(ggpubr)
# create pdf; change name every day
pdf(file = "/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Output/20220902_daily_measurements.pdf",
width = 4,
height = 4)
daily <- ggarrange(temp, sal, total_pH_plot, TA,
ncol = 2, nrow = 2)
pdf(file = "/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Output/20220902_daily_measurements.pdf",
width = 4,
height = 4)
# combine plots using ggpubr command onto one page
daily <- ggarrange(temp, sal, total_pH_plot, TA,
ncol = 2, nrow = 2)
print(daily) # view plot
# dev.off is used to create the file
dev.off()
library(dplyr)
library(tidyverse)
library(ggplot2)
library(lubridate) # used for converting 8 digit date into datetime format for R
library(RColorBrewer)
setwd("/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab")
daily_measurements$Date <- ymd(daily_measurements$Date) # convert 8 digit date into datetime format
month <-daily_measurements[daily_measurements$Date >= "2022-06-01" & daily_measurements$Date <= "2022-09-06", ] # use if you would like to subset by month or from certain date range
temp <- ggplot(month, aes(x=Date, y=Temperature_C, colour = Tank_ID)) +
geom_line() +
theme_classic() +
geom_point() +
ylab("Temperature °C")
print(temp)
sal <- ggplot(month, aes(x=Date, y=Salinity_psu, colour = Tank_ID)) +
geom_line() +
theme_classic() +
geom_point() +
ylab("Salinity (psu)")
print(sal)
getwd() #check working directory
path <-("/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Data/tris_cal") #set path to calibration files
file.names<-list.files(path = path, pattern = "csv$") #list all the file names in the folder to get only the .csv files
print(file.names)
pH.cals <- data.frame(matrix(NA, nrow=length(file.names), ncol=3, dimnames=list(file.names,c("Date", "Intercept", "Slope")))) #generate a 3 column dataframe with specific column names
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Calib.Data <-read.table(file.path(path,file.names[i]), header=TRUE, sep=",", na.string="NA",
as.is=TRUE) #reads in the data files
file.names[i]
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
summary(model)$r.squared #extracts the r squared
plot(Calib.Data$mVTris, Calib.Data$TTris, main = summary(model)$r.squared) #plots the regression data
pH.cals[i,2:3] <- coe #inserts coefficients in the dataframe
pH.cals[i,1] <- substr(file.names[i],1,8) #stores the file name in the Date column
}
colnames(pH.cals) <- c("Date",  "Intercept",  "Slope")#rename columns
print(pH.cals) #view data
#constants for use in pH calculation
R <- 8.31447215 #gas constant in J mol-1 K-1
F <- 96485.339924 #Faraday constant in coulombs mol-1
#merge with Seawater chemistry file
SW.chem <- full_join(month, pH.cals, by="Date")
#merge with Seawater chemistry file
SW.chem <- full_join(month, pH.cals, by="Date")
View(pH.cals)
daily_measurements$Tank_ID <- as.factor(daily_measurements$Tank_ID)
SW.chem <- full_join(month, pH.cals, by="Date")
pH.cals$Date <- ymd(pH.cals$Date)
#merge with Seawater chemistry file
SW.chem <- full_join(month, pH.cals, by="Date")
calib.date <- "2022-08-25"
pH.cals<-pH.cals[pH.cals$Date==calib.date,]
month <-daily_measurements[daily_measurements$Date >= "2022-08-17" & daily_measurements$Date <= "2022-09-06", ]
nrows<-nrow(month) #need file length/number of rows
total_pH <- data.frame(matrix(nrow = nrows, ncol = 6)) # changed from 4 columns to 5 LZ 20220720
colnames(total_pH)<-c("Date","Tank_ID", "Temperature_C",'mvTris','phTris','pH.Total')
mvTris <- month$Temperature_C*pH.cals$Slope+pH.cals$Intercept #calculate the mV of the tris standard using the temperature mv relationships in the measured standard curves
STris<-35 #salinity of the Tris
print(mvTris)
phTris<- (11911.08-18.2499*STris-0.039336*STris^2)*(1/(month$Temperature_C+273.15))-366.27059+ 0.53993607*STris+0.00016329*STris^2+(64.52243-0.084041*STris)*log(month$Temperature_C+273.15)-0.11149858*(month$Temperature_C+273.15) #calculate the pH of the tris (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
print(phTris)
pH.Total<-phTris+(mvTris/1000-month$pH_mv/1000)/(R*(month$Temperature_C+273.15)*log(10)/F) #calculate the pH on the total scale (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
print(pH.Total)
# populate empty dataframe with Tris calibrations
Date <- month$Date
Date <- ymd(month$Date)
total_pH$Date <- Date
print(total_pH$Date)
total_pH$Date <- as.Date(total_pH$Date)
Tank_ID <- month$Tank_ID
total_pH$Tank_ID <- Tank_ID
Temperature_C <- month$Temperature_C
total_pH$Temperature_C <- Temperature_C
total_pH$pH.Total <- pH.Total
total_pH$phTris <- phTris
total_pH$mvTris <- mvTris
total_pH_cumu <- read.csv("/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Data/total_pH.csv") # do not change
total_pH_cumu$Date <- as.Date(total_pH_cumu$Date)
total_pH$Date <- as.Date(total_pH$Date)
update.data <- rbind(total_pH_cumu, total_pH)
tail(update.data)
update.data <- rbind(total_pH_cumu, total_pH)
View(update.data)
month <-daily_measurements[daily_measurements$Date >= "2022-08-17" & daily_measurements$Date <= "2022-09-06", ]
View(month)
month <-daily_measurements[daily_measurements$Date >= "2022-08-17" & daily_measurements$Date <= "2022-09-06", ]
month <-daily_measurements[daily_measurements$Date >= "2022-06-01" & daily_measurements$Date <= "2022-09-06", ] # use if you would like to subset by month or from certain date range
month <-daily_measurements[daily_measurements$Date >= "2022-06-01" & daily_measurements$Date <= "2022-09-06", ] # use if you would like to subset by month or from certain date range
month <-daily_measurements[daily_measurements$Date >= "2022-06-01" & daily_measurements$Date <= "2022-09-06", ]
View(month)
daily_measurements <- read.csv("../Data/Daily_measurements_tracking.csv")
daily_measurements$Date <- ymd(daily_measurements$Date) # convert 8 digit date into datetime format
month <-daily_measurements[daily_measurements$Date >= "2022-06-01" & daily_measurements$Date <= "2022-09-06", ]
temp <- ggplot(month, aes(x=Date, y=Temperature_C, colour = Tank_ID)) +
geom_line() +
theme_classic() +
geom_point() +
ylab("Temperature °C")
sal <- ggplot(month, aes(x=Date, y=Salinity_psu, colour = Tank_ID)) +
geom_line() +
theme_classic() +
geom_point() +
ylab("Salinity (psu)")
path <-("/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Data/tris_cal") #set path to calibration files
file.names<-list.files(path = path, pattern = "csv$") #list all the file names in the folder to get only the .csv files
print(file.names)
pH.cals <- data.frame(matrix(NA, nrow=length(file.names), ncol=3, dimnames=list(file.names,c("Date", "Intercept", "Slope")))) #generate a 3 column dataframe with specific column names
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Calib.Data <-read.table(file.path(path,file.names[i]), header=TRUE, sep=",", na.string="NA",
as.is=TRUE) #reads in the data files
file.names[i]
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
summary(model)$r.squared #extracts the r squared
plot(Calib.Data$mVTris, Calib.Data$TTris, main = summary(model)$r.squared) #plots the regression data
pH.cals[i,2:3] <- coe #inserts coefficients in the dataframe
pH.cals[i,1] <- substr(file.names[i],1,8) #stores the file name in the Date column
}
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Calib.Data <-read.table(file.path(path,file.names[i]), header=TRUE, sep=",", na.string="NA",
as.is=TRUE) #reads in the data files
file.names[i]
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
summary(model)$r.squared #extracts the r squared
plot(Calib.Data$mVTris, Calib.Data$TTris, main = summary(model)$r.squared) #plots the regression data
pH.cals[i,2:3] <- coe #inserts coefficients in the dataframe
pH.cals[i,1] <- substr(file.names[i],1,8) #stores the file name in the Date column
}
colnames(pH.cals) <- c("Date",  "Intercept",  "Slope")#rename columns
pH.cals$Date <- ymd(pH.cals$Date)
print(pH.cals) #view data
#constants for use in pH calculation
R <- 8.31447215 #gas constant in J mol-1 K-1
F <- 96485.339924 #Faraday constant in coulombs mol-1
SW.chem <- full_join(month, pH.cals, by="Date")
calib.date <- "2022-08-25"
pH.cals<-pH.cals[pH.cals$Date==calib.date,]
tris <-daily_measurements[daily_measurements$Date >= "2022-08-17" & daily_measurements$Date <= "2022-09-06", ]
nrows<-nrow(month) #need file length/number of rows
total_pH <- data.frame(matrix(nrow = nrows, ncol = 6)) # changed from 4 columns to 5 LZ 20220720
colnames(total_pH)<-c("Date","Tank_ID", "Temperature_C",'mvTris','phTris','pH.Total')
mvTris <- month$Temperature_C*pH.cals$Slope+pH.cals$Intercept #calculate the mV of the tris standard using the temperature mv relationships in the measured standard curves
STris<-35 #salinity of the Tris
print(mvTris)
phTris<- (11911.08-18.2499*STris-0.039336*STris^2)*(1/(month$Temperature_C+273.15))-366.27059+ 0.53993607*STris+0.00016329*STris^2+(64.52243-0.084041*STris)*log(month$Temperature_C+273.15)-0.11149858*(month$Temperature_C+273.15) #calculate the pH of the tris (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
print(phTris)
pH.Total<-phTris+(mvTris/1000-month$pH_mv/1000)/(R*(month$Temperature_C+273.15)*log(10)/F) #calculate the pH on the total scale (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
print(pH.Total)
# populate empty dataframe with Tris calibrations
Date <- month$Date
Date <- ymd(month$Date)
total_pH$Date <- Date
print(total_pH$Date)
Tank_ID <- month$Tank_ID
total_pH$Tank_ID <- Tank_ID
Temperature_C <- month$Temperature_C
total_pH$Temperature_C <- Temperature_C
total_pH$pH.Total <- pH.Total
total_pH$phTris <- phTris
total_pH$mvTris <- mvTris
# append total pH to cumulative total pH dataframe each week
getwd()
total_pH_cumu <- read.csv("/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Data/total_pH.csv") # do not change
total_pH_cumu$Date <- as.Date(total_pH_cumu$Date)
total_pH$Date <- as.Date(total_pH$Date)
update.data <- rbind(total_pH_cumu, total_pH)
tail(update.data)
write.table(update.data,"/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Data/total_pH.csv",sep=",", row.names=FALSE) # do not change; updated df needs to overwrite the old one
total_pH_plot <- ggplot(update.data, aes(x=Date, y=pH.Total, group = Tank_ID, colour = Tank_ID)) +
geom_line() +
geom_point()+
theme_classic()+
ylab("total pH")
print(total_pH_plot)
TA_data <- read.csv("/Users/laurenzane/Desktop/Putnam_Lab/Titrator/Data/CBLS_Aquarium_TA.csv")
TA_data$Date <- ymd(TA_data$Date) # convert 8 digit date into datetime format
TA_data$Date <-as.character(TA_data$Date)
# subset to remove junk samples or CRM
TA_unknown_only <- TA_data[(TA_data$SampleID == "BT1") | (TA_data$SampleID == "BT2")|(TA_data$SampleID == "BT3") | (TA_data$SampleID == "HT1") | (TA_data$SampleID == "HT2"),]
TA <- ggplot(TA_unknown_only, aes(x=Date, y=TA, group = SampleID, colour = SampleID)) + geom_line() + geom_point() + theme_classic()
#load library
library(ggpubr)
pdf(file = "/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Output/20220906_daily_measurements.pdf",
width = 4,
height = 4)
daily <- ggarrange(temp, sal, total_pH_plot, TA,
ncol = 2, nrow = 2)
pdf(file = "/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Output/20220906_daily_measurements.pdf",
width = 4,
height = 4)
# combine plots using ggpubr command onto one page
daily <- ggarrange(temp, sal, total_pH_plot, TA,
ncol = 2, nrow = 2)
print(daily) # view plot
# dev.off is used to create the file
dev.off()
# modified for personal Lenovo PC at PT Whitney summer 2019
# last modification on 20210621 by RB
setwd("/Users/laurenzane/Desktop/Putnam_Lab/CBLS_Wetlab/Data/tris_cal/") #set working directory
getwd()
Calib.Data <-read.table("20220919.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
